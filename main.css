:root {
    --background-color: #080014;
    --panel-color: #141335;
    --text-color: #5ea6d6;
    --warning-color: #d72;
    --fatal-color: #FF3322;
    --parallax-ratio: 0.05;
    
    background: var(--background-color);
    color: var(--text-color);
    width: 100%;
    height: 100%;
    contain: strict;
}

input {
    background: var(--background-color);
    color: #7686ce;
}

/* Top-level layout */

body {
    margin: 1em;
    padding: 0;
    isolation: isolate;
    width: calc(100% - 2em);
    height: calc(100% - 2em);
    display: grid;
    grid:
        "viewport depth console" 100%
        / 1fr min-content minmax(min-content, 25rem);
    gap: 1em;
}

#viewportRegion {
    grid-area: viewport;
}

#depthRegion {
    grid-area: depth;
}

#sideConsole {
    grid-area: console;
}

#sideConsole {
    display: flex;
    flex-direction: column;
    
    gap: 1em;
}

@media (orientation: portrait) {
    body {
        grid:
            "viewport depth" minmax(min-content, calc(100dvw - 2em))
            "console console" minmax(min-content, 1fr)
            / 1fr min-content;
    }
    #sideConsole {
        flex-direction: row;
        flex-wrap: wrap;        
    }
}

/* Main game display */

#viewportRegion {
    display: grid;
    border: 1px solid currentColor;
    align-items: center;
    justify-items: center;
    overflow: hidden;
    contain: size;
    position: relative;
    --container-aspect: calc(var(--container-px-width) / var(--container-px-height));
}

#gameDisplay {
    display: grid;
    grid: "display" calc(16px * var(--focus-rows)) / calc(16px * var(--focus-cols));
    overflow: clip;
    align-items: center;
    justify-items: center;
    scale: var(--display-scale);
    translate:
        calc(var(--clipped-x) * var(--focus-x-ratio))
        calc(var(--clipped-y) * var(--focus-y-ratio));
    --display-scale: max((var(--container-px-height)) / var(--viewport-px-height), (var(--container-px-width)) / var(--viewport-px-width));
    --focus-radius-x: calc((var(--focus-cols) - 1) / 2);
    --focus-radius-y: calc((var(--focus-cols) - 1) / 2);
    --clipped-x: calc(max(0, (var(--viewport-px-width) * var(--display-scale) - var(--container-px-width) - 0.1)) * 0.5px);
    --clipped-y: calc(max(0, (var(--viewport-px-height) * var(--display-scale) - var(--container-px-height) - 0.1)) * 0.5px);
    --focus-x-ratio: calc((var(--center-col) - var(--focus-x)) / var(--focus-radius-x));
    --focus-y-ratio: calc((var(--center-row) - var(--focus-y)) / var(--focus-radius-y));
    --focus-x-px: calc((var(--center-col) - var(--focus-x)) * var(--tile-width));
    --focus-y-px: calc((var(--center-row) - var(--focus-y)) * var(--tile-height));
    --tile-width: calc(var(--viewport-px-width) / var(--focus-cols));
    --tile-height: calc(var(--viewport-px-height) / var(--focus-rows));
}
#gameDisplay > * {
    grid-area: display;
}

canvas.viewport-layer {
    background: #08001480;
    filter: blur(0) brightness(1);
    transform: 
        translate(calc(var(--focus-x-px) * -1px), calc(var(--focus-y-px) * -1px))
        scale(var(--canvas-scale))
        translate(calc(var(--focus-x-px) * 1px), calc(var(--focus-y-px) * 1px))
        ;
    --canvas-scale: calc(1 + var(--layer-offset) * var(--parallax-ratio));
    
}

canvas.layer-above {
    filter: blur(0.75px) brightness(calc(1 + 0.1 * var(--layer-offset)));
    opacity: calc(1.1 - 0.2 * var(--layer-offset));
    background: none;
}

canvas.layer-below {
    filter: blur(0.5px) brightness(1);
}

canvas.layer-focus {
    border-color: currentColor;
}

:root:is(.look-across, .look-up, .look-down) canvas.viewport-layer {
    opacity: 0;
    transition-duration: 0.1s;
    transition-property: opacity, filter;
}

:root.look-across canvas.layer-focus,
:root.look-down canvas.layer-below,
:root.look-up canvas.layer-above {
    opacity: 1;
    filter: blur(0) brightness(1);
}

:root:is(.look-down, .look-up) canvas.layer-focus {
    opacity: 0.25;
}

:root.look-up canvas.viewport-layer {
    z-index: calc(var(--layer-count) - var(--layer-index));
}

/* Depth gauge */

#depthRegion {
    display: grid;
    grid:
        "surfaceHint" min-content
        "gauge"       1fr
        "diveHint"    min-content
        / max-content;
    grid-template-rows: min-content 1fr min-content;
    grid-template-columns: max-content;
    gap: 1ex;
    align-items: stretch;
    justify-items: end;
}

#depthRegion > kbd:first-of-type {
    grid-area: surfaceHint;
}

#depthRegion > kbd:last-of-type {
    grid-area: diveHint;
}

#depthGauge {
    position: relative;
    width: 100%;
}

#depthGauge > canvas {
    inset: 0;
    position: absolute;
    height: 100%;
    margin: 0 auto;
}

/* Side-console stuff */
/* Stats panel */

#statsPanel {
    background: var(--panel-color);
    padding: 1em;
    font-family: monospace;
    font-size: 1.5rem;
    white-space: nowrap;
}

#statsPanel dl {
    margin: 0;
}

#statsPanel dd {
    display: flex;
    gap: 1em;
}

#statsPanel dd meter {
    flex-grow: 1;
}

#statsPanel output.curhp::after {
    content: " /";
}

#soul {
    display: none;
    color: #FF3322;
    filter: blur(0)
}

#satiety dd label {
    display: none; /* Not currently used */
}

:root:not(.dead) #soul dt {
    animation: 50ms linear 0s infinite alternate shaking;
}
:root.dead.buried #soul {
    animation: 100ms linear 0s infinite alternate shaking;
    color: #777;
    filter: blur(10px);
    scale: 3;
    opacity: 0;
    transition: 0.5s cubic-bezier(.95,.05,.8,.04);
    transition-property: filter, scale, opacity;
}

:root.soul-uncovered #viewportRegion {
    border-color: #FF3322;
}

@keyframes shaking {
    from {
        translate: 0em -0.05em;
    }
    25% {
        translate: 0.01em -0.01em;
    }
    50% {
        translate: 0em -0.01em;
    }
    75% {
        translate: 0.02em -0.01em;
    }
    to {
        translate: 0.01em 0.05em;
    }
}

meter {
    filter: invert(0);
    transition: filter 0.5s;
}

.bodypart.broken {
    color: #777;
}

.bodypart.broken meter {
    filter: invert(1);
}

.bodypart.broken ~ #soul {
    display: block;
}

/* Messages panel */

#messagesPanel {
    background: var(--panel-color);
    padding: 1em;
    flex-grow: 1;
    overflow: hidden auto;
}

.message {
    --force-opacity: 0;
    list-style: none;
    font-family: Verdana, sans-serif;
    font-size: 1.2rem;
    scale: 1;
    opacity: max(var(--force-opacity), 0.25 + 0.5 * (var(--log-limit) - var(--log-max-index) + var(--log-index)) / var(--log-limit));
    filter: blur(0);
    transition-property: scale, filter;
    transition-duration: 0.25s;
    transition-timing-function: cubic-bezier(.55,.06,.68,.19);
    margin-bottom: 0.25lh;
}

.message.unread {
    --force-opacity: 1;
}   

.message.new {
    filter: blur(20px);
    scale: 1.5;
    transition-duration: 0s;
}

.warning {
    color: var(--warning-color);
}
.fatal {
    color: var(--fatal-color);
}
.message:has(>.fatal:only-child) {
    text-align: center;
}

.callout {
    text-align: center;
    font-style: italic;
    font-family: serif;
    margin: 1ex 1em;
}
.callout:last-of-type {
    margin-bottom: 0.5lh;
}

/* Help screen */

#help {
    background: var(--panel-color);
    color: var(--text-color);
    font-size: 1.25rem;
    width: 85dvw;
    height: 85dvh;
    grid:
        "label label label" max-content
        "indicator indicator indicator" 1fr
        "left center right" max-content
        "left center right" max-content
        "left center right" max-content
        "left center right" max-content
        "left center right" max-content
        "left center right" max-content
        "left center right" max-content
        / 1fr 1fr 1fr;
    column-gap: 1em;
    row-gap: 1ex;
}

#help[open] {
    display: grid;
}

#help > .binding-label {
    grid-area: label;
}

dl.left {
    grid-area: left;
}
dl.center {
    grid-area: center;
}
dl.right {
    grid-area: right;
}

#help dl {
    display: grid;
    grid-template-columns: min-content 1fr;
    align-items: center;
    grid-template-rows: subgrid;
    margin: 0;
}

#help dt {
    grid-column: 1;
    justify-self: center;
    white-space: nowrap;
}

#help dd {
    margin-left: 0.5em;
    grid-column: 2;
}

#help dl > div {
    display: contents;
}

#help-indicator {
    grid-area: indicator;
}

#help-indicator::part(svg) {
    width:100%;
    height:100%;
}

/* Inventory screen */

#inventory {
    font-family: monospace;
    background: #141335;
    color: #3d4e9c;
    left: 0px;
    min-width: 400px;
    min-height: 300px;
    max-width: 75dvmin;
    max-height: 75dvmin;
    flex-direction: column;
}

#inventory[open] {
    display: flex;
}

#inventory ul.items-list {
    margin: 0;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    flex-grow: 1;
    gap: 16px;
    justify-content: center;
}

#inventory li {
    display: block;
}

.inventory-item canvas {
    width: 64px;
    image-rendering: pixelated;
}

#inventory > label {
    display: block;
    text-align: center;
    font-size: 2rem;
    font-family: monospace;
    min-height: 2lh;
    contain: inline-size;
}

#inventory > label:empty::before {
    content: "Select an item";
    opacity: 0.5;
}

#inventory menu {
    display: flex;
    margin: 0;
    padding: 1em 0 0;
    justify-content: space-evenly;
}

#inventory button {
    font-family: monospace;
    font-size: 1.5rem;
    appearance: none;
    border: none;
    background: none;
    color: #3d4e9c;
    position: relative;
}

#inventory button > label.stack-size {
    position: absolute;
    inset: auto 2px 0 auto;
}

#inventory button:focus-visible {
    outline: none;
}

#inventory button.selected {
    outline: 1px solid currentColor;
}

#inventory button:focus {
    outline: 3px solid currentColor;
}

/* Input indicators */

keyboard-cue {
    stroke: currentColor;
    stroke-width: 3;
    fill: transparent;
    display: inline-block;
}

keyboard-cue::part(svg) {
    height: 2lh;
    vertical-align: middle;
}

keyboard-cue[view=spaceEnvirons]::part(svg) {
    height: 1lh;
}
keyboard-cue[view=spaceEnvirons]::part(key) {
    stroke-width: 5;
}

keyboard-cue::part(lowlight) {
    fill: #798bdc80;
}
keyboard-cue::part(highlight) {
    fill: #798bdc;
}
keyboard-cue::part(secondary) {
    fill: #689c3d;
}
keyboard-cue::part(tertiary) {
    fill: #9c6a3d;
}
#help dl keyboard-cue::part(highlight secondary) {
    fill: #9c6a3d;
}

kbd {
    background: #798bdc80;
    border: 1px solid var(--text-color);
    color: var(--text-color);
    display: inline-block;
    box-sizing: border-box;
    min-width: 1.5em;
    min-height: 1.5em;
    line-height: 1.5em;
    text-align: center;
    border-radius: 3px;
    padding: 0px 4px;
}

#help kbd {
    color: white;    
}

#controlsHelp {
    display: flex;
    flex-direction: row;
    align-items: first baseline;
    gap: 1em;
    justify-content: end;
    width: 100%;
}

/* Debug and other random crap */

.hidden {
    display: none !important;
}

dl:is(.debugInfo,#controls) {
    margin:0 0 1ex 0;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: first baseline;
    gap: 1em;
    overflow: auto;
}

dl:is(.debugInfo,#controls) dt::after {
    content: ":"
}

dl:is(.debugInfo,#controls) > div:has(+div) > dd::after {
    content: ","
}

dl:is(.debugInfo,#controls) :is(dt, dd) {
    display: inline;
    margin: 0;
}
