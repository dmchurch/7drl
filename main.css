:root {
    background: #080014;
    color: #5ea6d6;
    width: 100%;
    height: 100%;
    contain: strict;
}

input {
    background: #080014;
    color: #7686ce;
}
body {
    margin: 0;
    padding: 0;
    isolation: isolate;
    width: 100dvw;
    height: 100dvh;
    display: grid;
    grid:
        "viewport console" 100dvh
        / 1fr minmax(min-content, 25rem);
}

#viewportRegion {
    grid-area: viewport;
    display: grid;
    margin: 1em;
    border: 1px solid currentColor;
    align-items: center;
    justify-items: center;
    overflow: hidden;
    contain: size;
    position: relative;
}

#sideConsole {
    grid-area: console;
    margin: 1em;
    margin-left: 0;
    display: flex;
    flex-direction: column;
    
    gap: 1em;
}

@media (orientation: portrait) {
    body {
        grid:
            "viewport" minmax(min-content, 100dvw)
            "console" minmax(min-content, 1fr)
            / 100dvw;
    }
    #sideConsole {
        margin-left: 1em;
        margin-top: 0;
        flex-direction: row;
        flex-wrap: wrap;        
    }
}

#gameDisplay {
    display: grid;
    grid: "display" calc(16px * var(--focus-rows)) / calc(16px * var(--focus-cols));
    overflow: clip;
    align-items: center;
    justify-items: center;
    scale: calc(max((var(--container-px-height)) / var(--viewport-px-height),
                    (var(--container-px-width)) / var(--viewport-px-width)));
}
#gameDisplay > * {
    grid-area: display;
}

canvas.viewport-layer {
    background: #08001480;
    filter: blur(0) brightness(1);
    scale: calc(1 + var(--layer-offset) * .1);
/*     mix-blend-mode: lighten; */
}

canvas.layer-above {
    filter: blur(0.75px) brightness(calc(1 + 0.1 * var(--layer-offset)));
    opacity: calc(1.1 - 0.2 * var(--layer-offset));
    background: none;
}

canvas.layer-below {
    filter: blur(0.5px) brightness(1);
}

canvas.layer-focus {
    border-color: currentColor;
}

:root:is(.look-across, .look-up, .look-down) canvas.viewport-layer {
    opacity: 0;
    transition-duration: 0.1s;
    transition-property: opacity filter;
}

:root.look-across canvas.layer-focus,
:root.look-down canvas.layer-below,
:root.look-up canvas.layer-above {
    opacity: 1;
    filter: blur(0) brightness(1);
}

:root:is(.look-down, .look-up) canvas.layer-focus {
    opacity: 0.25;
}

:root.look-up canvas.viewport-layer {
    z-index: calc(var(--layer-count) - var(--layer-index));
}

#statsPanel {
    background: #141335;
    padding: 1em;
    font-family: monospace;
    font-size: 1.5rem;
    white-space: nowrap;
}

#statsPanel dl {
    margin: 0;
}

#statsPanel output.curhp::after {
    content: " /";
}

#soul {
    display: none;
    color: #FF3322;
}

#soul dt {
    animation: 50ms linear 0s infinite alternate shaking;
}

@keyframes shaking {
    from {
        translate: 0em -0.05em;
    }
    25% {
        translate: 0.01em -0.01em;
    }
    50% {
        translate: 0em -0.01em;
    }
    75% {
        translate: 0.em -0.01em;
    }
    to {
        translate: 0.01em 0.05em;
    }
}

meter {
    filter: invert(0);
    transition: filter 0.5s;
}

.bodypart.broken {
    color: #777;
}

.bodypart.broken meter {
    filter: invert(1);
}

.bodypart.broken ~ #soul {
    display: block;
}

#messagesPanel {
    background: #141335;
    padding: 1em;
    flex-grow: 1;
    overflow: hidden auto;
}

.message {
    list-style: none;
    font-family: Verdana, sans-serif;
    font-size: 1.2rem;
    scale: 1;
    opacity: max((var(--log-index) - var(--log-max-index) + 1), 0.75 * (var(--log-limit) - var(--log-max-index) + var(--log-index)) / var(--log-limit));
    filter: blur(0);
    transition-property: scale, filter;
    transition-duration: 0.25s;
    transition-timing-function: cubic-bezier(.55,.06,.68,.19);
}

.message.new {
    filter: blur(20px);
    scale: 1.5;
    transition-duration: 0s;
}

#inventory {
    font-family: monospace;
    background: #141335;
    color: #3d4e9c;
    left: 0px;
    min-width: 400px;
    min-height: 300px;
    max-width: 75dvmin;
    max-height: 75dvmin;
    flex-direction: column;
}

#inventory[open] {
    display: flex;
}

#inventory ul.items-list {
    margin: 0;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    flex-grow: 1;
    gap: 16px;
    justify-content: center;
}

#inventory li {
    display: block;
}

.inventory-item canvas {
    width: 64px;
    image-rendering: pixelated;
}

#inventory > label {
    display: block;
    text-align: center;
    font-size: 2rem;
    font-family: monospace;
    min-height: 2lh;
    contain: inline-size;
}

#inventory > label:empty::before {
    content: "Select an item";
    opacity: 0.5;
}

#inventory menu {
    display: flex;
    margin: 0;
    padding: 1em 0 0;
    justify-content: space-evenly;
}

#inventory button {
    font-family: monospace;
    font-size: 1.5rem;
    appearance: none;
    border: none;
    background: none;
    color: #3d4e9c;
    position: relative;
}

#inventory button > label.stack-size {
    position: absolute;
    inset: auto 2px 0 auto;
}

#inventory button:focus-visible {
    outline: none;
}

#inventory button.selected {
    outline: 1px solid currentColor;
}

#inventory button:focus {
    outline: 3px solid currentColor;
}

keyboard-cue {
    stroke: currentColor;
    stroke-width: 3;
    fill: transparent;
    display: inline-block;
}

keyboard-cue::part(svg) {
    height: 2lh;
    vertical-align: middle;
}

keyboard-cue::part(lowlight) {
    fill: #798bdc80;
}
keyboard-cue::part(highlight) {
    fill: #798bdc;
}
keyboard-cue::part(secondary) {
    fill: #689c3d;
}
keyboard-cue::part(tertiary) {
    fill: #9c6a3d;
}

.hidden {
    display: none !important;
}

dl:is(.debugInfo,#controls) {
    margin:0 0 1ex 0;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: first baseline;
    gap: 1em;
    overflow: auto;
}

dl:is(.debugInfo,#controls) dt::after {
    content: ":"
}

dl:is(.debugInfo,#controls) > div:has(+div) > dd::after {
    content: ","
}

dl:is(.debugInfo,#controls) :is(dt, dd) {
    display: inline;
    margin: 0;
}
